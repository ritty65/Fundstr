name: Deploy staging (Develop2 â†’ Hostinger)

on:
  push:
    branches: [Develop2]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable pnpm via Corepack
        run: |
          corepack enable
          corepack prepare pnpm@10.16.1 --activate
          pnpm --version

      - name: Use staging env
        run: cp .env.staging .env

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build (Quasar SPA)
        run: pnpm quasar build -m spa

      - name: Validate built asset references
        run: |
          set -euo pipefail
          mapfile -t assets < <(
            grep -oE '(src|href)="/assets/[^"]+' dist/spa/index.html |
              sed -E 's/^(src|href)="//' |
              sort -u || true
          )
          if [ "${#assets[@]}" -eq 0 ]; then
            echo "No /assets references found in dist/spa/index.html"
            exit 0
          fi

          echo "Assets referenced in index.html:"
          for asset in "${assets[@]}"; do
            echo "  $asset"
          done

          missing=0
          for asset in "${assets[@]}"; do
            if [ ! -f "dist/spa${asset}" ]; then
              echo "Missing asset referenced in index.html: dist/spa${asset}" >&2
              missing=1
            fi
          done

          if [ "$missing" -ne 0 ]; then
            exit 1
          fi

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust remote host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Log remote assets before deploy
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "set -euo pipefail; ls -R \"${{ secrets.SSH_TARGET_STAGING }}/assets\" | head"

      - name: Deploy (rsync)
        run: |
          rsync -avz --delete \
            -e "ssh -p ${{ secrets.SSH_PORT }}" \
            dist/spa/ \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_TARGET_STAGING }}/"

      - name: Log remote assets after deploy
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "set -euo pipefail; ls -R \"${{ secrets.SSH_TARGET_STAGING }}/assets\" | head"

      - name: Verify remote assets mirror local build
        run: |
          set -euo pipefail
          local_listing="$(mktemp)"
          remote_listing="$(mktemp)"

          (cd dist/spa/assets && find . -type f | sort) > "$local_listing"

          ssh -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "set -euo pipefail; cd \"${{ secrets.SSH_TARGET_STAGING }}/assets\" && find . -type f | sort" \
            > "$remote_listing"

          if ! diff -u "$local_listing" "$remote_listing"; then
            echo 'Remote assets differ from local build.' >&2
            exit 1
          fi
